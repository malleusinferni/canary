use ast::*;
use token::Interp;
use super::Error;

grammar;

pub module: Module = {
    <begin:stmt*> <defs:def*> => {
        let begin = begin.into_iter().filter_map(|a| a).collect();
        Module { begin, defs }
    },
};

pub def: Def = {
    "sub" <name:near_word> "(" <args:comma<var>?> ")" <body:block> => {
        let args = Args(args.unwrap_or_else(|| vec![]));
        Def { name, args, body }
    },
};

block: Vec<Stmt> = {
    "{" <block_body> "}",
};

pub block_body: Vec<Stmt> = {
    <stmt*> => (<>).into_iter().filter_map(|a| a).collect(),
};

stmt: Option<Stmt> = {
    <simple_stmt?> ";" => (<>),

    <block_stmt> => Some(<>),
};

simple_stmt: Stmt = {
    "my" <lhs:var> <rhs:("=" <expr>)?> => {
        Stmt::My { lhs, rhs }
    },

    <lhs:expr> "=" <rhs:expr> => {
        Stmt::Assign { lhs, rhs }
    },

    "return" <rhs:expr?> => {
        Stmt::Return { rhs }
    },

    <rhs:expr> => {
        Stmt::Bare { rhs }
    },

    <name:far_word> <args:comma<expr>?> => {
        let args = args.unwrap_or(vec![]);
        let rhs = Expr::Call { name, args };
        Stmt::Bare { rhs }
    },
};

block_stmt: Stmt = {
    "if" <first:(<expr> <block>)>
        <rest:("else" "if" <expr> <block>)*>
        <last:("else" <block>)?>
        =>
    {
        let mut clauses = vec![first];
        clauses.extend(rest.into_iter());
        let last = last.unwrap_or(vec![]);
        Stmt::If { clauses, last }
    },

    "while" <test:expr> <body:block> => {
        Stmt::While { test, body }
    },
};

expr: Expr = {
    <lhs:expr5> "or" <rhs:expr> => {
        Expr::Or { lhs: lhs.into(), rhs: rhs.into() }
    },

    <expr5> => <>,
};

expr5: Expr = {
    <lhs:expr4> "and" <rhs:expr5> => {
        Expr::And { lhs: lhs.into(), rhs: rhs.into() }
    },

    <expr4> => <>,
};

expr4: Expr = {
    <lhs:expr3> "eq" <rhs:expr3> => {
        Binop::Equal.apply(lhs, rhs)
    },

    <lhs:expr3> "ne" <rhs:expr3> => {
        Binop::NotEqual.apply(lhs, rhs)
    },

    <expr3> => <>,
};

expr3: Expr = {
    <lhs:expr2> "+" <rhs:expr3> => {
        Binop::Add.apply(lhs, rhs)
    },

    <lhs:expr2> "-" <rhs:expr3> => {
        Binop::Sub.apply(lhs, rhs)
    },

    <expr2> => <>,
};

expr2: Expr = {
    <lhs:expr1> "*" <rhs:expr2> => {
        Binop::Mul.apply(lhs, rhs)
    },

    <lhs:expr1> "/" <rhs:expr2> => {
        Binop::Div.apply(lhs, rhs)
    },

    <lhs:expr1> "=~" <rhs:expr1> => {
        Binop::Match.apply(lhs, rhs)
    },

    <expr1> => <>,
};

expr1: Expr = {
    <int> => Expr::Literal(Literal::Int(<>)),

    <sym> => Expr::Literal(Literal::Ident(<>)),

    <var> => Expr::Local(<>),

    <global> => Expr::Global(<>),

    <group> => Expr::Group(<>),

    <pattern> => Expr::Literal(Literal::Pattern(<>)),

    <items:string> => Expr::Str({
        items.into_iter().map(|i| match i {
            Interp::S(s) => Expr::Literal(Literal::Str(s)),
            Interp::V(v) => Expr::Local(v),
            Interp::G(g) => Expr::Global(g),
        }).collect()
    }),

    <name:near_word> "(" <args:comma<expr>?> ")" => {
        let args = args.unwrap_or_else(|| vec![]);
        Expr::Call { name, args }
    },

    <lhs:expr1> "[" <rhs:expr> "]" => {
        Binop::Idx.apply(lhs, rhs)
    },

    <lhs:expr1> "." <idx:far_word> => {
        let rhs = Expr::Literal(Literal::Ident(idx));
        Binop::Idx.apply(lhs, rhs)
    },

    "[" <comma<expr>?> "]" => Expr::List((<>).unwrap_or(vec![])),

    "(" <expr> ")" => <>,
};

#[inline]
comma<T>: Vec<T> = {
    <many:(<T> ",")*> <last:T> => {
        let mut many = many;
        many.push(last);
        many
    },
};

extern {
    type Location = usize;
    type Error = Error;

    enum Token {
        "return" => Token::RETURN,
        "sub" => Token::DEF,
        "my" => Token::LET,
        "if" => Token::IF,
        "else" => Token::ELSE,
        "while" => Token::WHILE,
        "eq" => Token::EQ,
        "ne" => Token::NE,
        "and" => Token::AND,
        "or" => Token::OR,
        "(" => Token::LPAR,
        ")" => Token::RPAR,
        "[" => Token::LSQB,
        "]" => Token::RSQB,
        "{" => Token::LCBR,
        "}" => Token::RCBR,
        ":" => Token::COLON,
        "=" => Token::EQUAL,
        "=~" => Token::MATCH,
        ";" => Token::EOL,
        "," => Token::COMMA,
        "." => Token::DOT,
        "+" => Token::ADD,
        "-" => Token::SUB,
        "/" => Token::DIV,
        "*" => Token::MUL,
        int => Token::INT(<Int>),
        near_word => Token::NEARWORD(<Ident>),
        far_word => Token::FARWORD(<Ident>),
        global => Token::GLOBAL(<Ident>),
        group => Token::GROUP(<u8>),
        var => Token::VAR(<Ident>),
        sym => Token::SYM(<Ident>),
        string => Token::STR(<Vec<Interp>>),
        pattern => Token::PAT(<pattern::parse::Ast<Ident>>),
    }
}

// vim: ft=rust
